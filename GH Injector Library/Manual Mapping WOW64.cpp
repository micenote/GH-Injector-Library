#include "pch.h"

#ifdef _WIN64

#include "Manual Mapping.h"
#pragma comment (lib, "Psapi.lib")

BYTE ManualMap_Shell_WOW64[] = 
{ 
	0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x24, 0x57, 0x8B, 0x7D, 0x08, 0x85, 0xFF, 0x75, 0x0C, 0xB8, 0x01, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x8B, 0x47, 0x20, 0x53, 0x8B, 0x5F, 0x1C, 0x56, 0x89, 0x45, 
	0xFC, 0x8B, 0x73, 0x3C, 0x03, 0xF3, 0x89, 0x75, 0xF8, 0x8B, 0x46, 0x28, 0x03, 0xC3, 0x89, 0x45, 0xDC, 0x8B, 0x45, 0xFC, 0xA9, 0x00, 0x00, 0x04, 0x01, 0x0F, 0x84, 0xE1, 0x00, 0x00, 0x00, 0x83, 0xBE, 0x84, 0x00, 0x00, 
	0x00, 0x00, 0x0F, 0x84, 0xD4, 0x00, 0x00, 0x00, 0x8B, 0x4F, 0x08, 0x8B, 0x57, 0x0C, 0x8B, 0x47, 0x10, 0x89, 0x4D, 0xE8, 0x89, 0x55, 0xE4, 0x89, 0x45, 0xF4, 0x85, 0xC9, 0x0F, 0x84, 0xE8, 0x00, 0x00, 0x00, 0x85, 0xD2,
	0x0F, 0x84, 0xF2, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x84, 0xFC, 0x00, 0x00, 0x00, 0x8B, 0xBE, 0x80, 0x00, 0x00, 0x00, 0x03, 0xFB, 0x89, 0x7D, 0xEC, 0x8B, 0x47, 0x0C, 0x85, 0xC0, 0x0F, 0x84, 0x8E, 0x00, 0x00, 0x00,
	0x8D, 0x34, 0x18, 0x56, 0xFF, 0xD2, 0x8B, 0xD0, 0x89, 0x55, 0xF0, 0x85, 0xD2, 0x75, 0x0D, 0x56, 0xFF, 0x55, 0xE8, 0x8B, 0xD0, 0x89, 0x45, 0xF0, 0x85, 0xD2, 0x74, 0x53, 0x8B, 0x4F, 0x10, 0x8B, 0x07, 0x85, 0xC0, 0x8D, 
	0x34, 0x19, 0x0F, 0x45, 0xC8, 0x8B, 0x04, 0x19, 0x8D, 0x3C, 0x19, 0x85, 0xC0, 0x74, 0x27, 0x79, 0x05, 0x0F, 0xB7, 0xC0, 0xEB, 0x05, 0x83, 0xC0, 0x02, 0x03, 0xC3, 0x50, 0x52, 0xFF, 0x55, 0xF4, 0x89, 0x06, 0x85, 0xC0,
	0x74, 0x33, 0x8B, 0x47, 0x04, 0x83, 0xC7, 0x04, 0x8B, 0x55, 0xF0, 0x83, 0xC6, 0x04, 0x85, 0xC0, 0x75, 0xD9, 0x8B, 0x7D, 0xEC, 0x83, 0xC7, 0x14, 0x89, 0x7D, 0xEC, 0x8B, 0x47, 0x0C, 0x85, 0xC0, 0x74, 0x21, 0x8B, 0x55,
	0xE4, 0xEB, 0x91, 0x5E, 0x5B, 0xB8, 0x05, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x5E, 0x5B, 0xB8, 0x06, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x8B, 0x75, 0xF8, 0x8B, 0x45,
	0xFC, 0x8B, 0x7D, 0x08, 0xA9, 0x00, 0x00, 0x08, 0x00, 0x0F, 0x84, 0x15, 0x01, 0x00, 0x00, 0x83, 0xBE, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x08, 0x01, 0x00, 0x00, 0x8B, 0x4F, 0x08, 0x8B, 0x57, 0x0C, 0x8B, 0x47,
	0x10, 0x89, 0x4D, 0xE4, 0x89, 0x55, 0xE0, 0x89, 0x45, 0xEC, 0x85, 0xC9, 0x75, 0x0E, 0x5E, 0x5B, 0xB8, 0x02, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x85, 0xD2, 0x75, 0x0E, 0x5E, 0x5B, 0xB8, 0x03,
	0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x85, 0xC0, 0x75, 0x0E, 0x5E, 0x5B, 0xB8, 0x04, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x8B, 0xBE, 0xE0, 0x00, 0x00, 0x00, 0x03, 0xFB,
	0x83, 0x7F, 0x04, 0x00, 0x0F, 0x84, 0xAE, 0x00, 0x00, 0x00, 0x83, 0xC7, 0x0C, 0x89, 0x7D, 0xE8, 0x0F, 0x1F, 0x40, 0x00, 0x8B, 0x77, 0xF8, 0x03, 0xF3, 0x56, 0xFF, 0xD2, 0x8B, 0xC8, 0x89, 0x4D, 0xF4, 0x85, 0xC9, 0x75, 
	0x0D, 0x56, 0xFF, 0x55, 0xE4, 0x8B, 0xC8, 0x89, 0x45, 0xF4, 0x85, 0xC9, 0x74, 0x6A, 0x8B, 0x47, 0xFC, 0x85, 0xC0, 0x74, 0x03, 0x89, 0x0C, 0x18, 0x8B, 0x37, 0x8B, 0x7F, 0x04, 0x03, 0xF3, 0x03, 0xFB, 0x8B, 0x06, 0x89, 
	0x45, 0xF0, 0x85, 0xC0, 0x74, 0x37, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x8B, 0x07, 0x85, 0xC0, 0x79, 0x05, 0x0F, 0xB7, 0xC0, 0xEB, 0x05, 0x83, 0xC0, 0x02, 0x03, 0xC3, 0x50, 0x51, 0xFF, 0x55, 0xEC, 0x8B, 0x4D, 0xF0,
	0x89, 0x01, 0x85, 0xC0, 0x74, 0x38, 0x8B, 0x4E, 0x04, 0x83, 0xC6, 0x04, 0x83, 0xC7, 0x04, 0x89, 0x4D, 0xF0, 0x85, 0xC9, 0x8B, 0x4D, 0xF4, 0x75, 0xCF, 0x8B, 0x7D, 0xE8, 0x83, 0xC7, 0x20, 0x89, 0x7D, 0xE8, 0x83, 0x7F,
	0xF8, 0x00, 0x74, 0x24, 0x8B, 0x55, 0xE0, 0xE9, 0x78, 0xFF, 0xFF, 0xFF, 0x5E, 0x5B, 0xB8, 0x07, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x5E, 0x5B, 0xB8, 0x08, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5,
	0x5D, 0xC2, 0x04, 0x00, 0x8B, 0x75, 0xFC, 0xF7, 0xC6, 0x00, 0x00, 0x20, 0x00, 0x74, 0x34, 0x8B, 0x45, 0x08, 0x8B, 0x40, 0x14, 0x85, 0xC0, 0x75, 0x0E, 0x5E, 0x5B, 0xB8, 0x0A, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D,
	0xC2, 0x04, 0x00, 0x8B, 0x7D, 0xF8, 0x8B, 0xCB, 0x8B, 0x57, 0x50, 0xFF, 0xD0, 0x85, 0xC0, 0x79, 0x11, 0x5E, 0x5B, 0xB8, 0x0B, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x8B, 0x7D, 0xF8, 0xF7, 0xC6,
	0x00, 0x00, 0x10, 0x00, 0x74, 0x77, 0x83, 0xBF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6E, 0x8B, 0xB7, 0xC0, 0x00, 0x00, 0x00, 0x83, 0x3C, 0x1E, 0x00, 0x74, 0x48, 0x8B, 0x45, 0x08, 0x8B, 0x40, 0x18, 0x85, 0xC0, 0x75,
	0x0E, 0x5E, 0x5B, 0xB8, 0x0C, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x6A, 0x04, 0x68, 0x00, 0x30, 0x00, 0x00, 0x68, 0x00, 0x10, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0xD0, 0x8B, 0xC8, 0x85, 0xC9, 0x75,
	0x0E, 0x5E, 0x5B, 0xB8, 0x0D, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x8B, 0x04, 0x1E, 0x64, 0x89, 0x0D, 0x2C, 0x00, 0x00, 0x00, 0x89, 0x01, 0x8B, 0x74, 0x1E, 0x0C, 0x85, 0xF6, 0x74, 0x12, 0x8B,
	0x06, 0x85, 0xC0, 0x74, 0x0C, 0x6A, 0x00, 0x6A, 0x01, 0x53, 0xFF, 0xD0, 0x83, 0xC6, 0x04, 0x75, 0xEE, 0x8B, 0x45, 0xFC, 0xA9, 0x00, 0x00, 0x00, 0x01, 0x74, 0x0B, 0x6A, 0x00, 0x6A, 0x01, 0x53, 0xFF, 0x55, 0xDC, 0x8B, 
	0x45, 0xFC, 0xA9, 0x00, 0x00, 0x02, 0x00, 0x0F, 0x84, 0x35, 0x02, 0x00, 0x00, 0x83, 0xBF, 0x84, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x80, 0x00, 0x00, 0x00, 0x8B, 0x97, 0x80, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x8B, 0x42,
	0x0C, 0x85, 0xC0, 0x74, 0x5D, 0x80, 0x3C, 0x18, 0x00, 0x74, 0x05, 0xC6, 0x44, 0x18, 0x01, 0x00, 0x8B, 0x02, 0xC7, 0x42, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x0C, 0x18, 0x85, 0xC0, 0x75, 0x05, 0x8B, 0x4A, 0x10, 0x03,
	0xCB, 0x8B, 0x01, 0x85, 0xC0, 0x74, 0x20, 0x79, 0x08, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0C, 0x80, 0x7C, 0x18, 0x02, 0x00, 0x74, 0x05, 0xC6, 0x44, 0x18, 0x03, 0x00, 0x8B, 0x41, 0x04, 0x83, 0xC1, 0x04, 0x85, 
	0xC0, 0x75, 0xE0, 0xC7, 0x02, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x42, 0x10, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC2, 0x14, 0x8B, 0x42, 0x0C, 0x85, 0xC0, 0x75, 0xA3, 0xC7, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xC7, 0x87, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x90, 0x00, 0x00, 0x00, 0x8B, 0xB7, 0xE0, 0x00, 0x00, 0x00, 0x03, 0xF3, 0x83, 0x7E, 0x04, 0x00, 0x74,
	0x6E, 0x83, 0xC6, 0x0C, 0x8B, 0x46, 0xF8, 0x80, 0x3C, 0x18, 0x00, 0x74, 0x05, 0xC6, 0x44, 0x18, 0x01, 0x00, 0x8B, 0x16, 0x8B, 0x4E, 0x04, 0x03, 0xD3, 0xC7, 0x46, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCB, 0xC7, 0x46, 
	0xFC, 0x00, 0x00, 0x00, 0x00, 0x83, 0x3A, 0x00, 0x74, 0x2B, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x8B, 0x01, 0x85, 0xC0, 0x79, 0x08, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0C, 0x80, 0x7C, 0x18, 0x02, 0x00, 0x74, 
	0x05, 0xC6, 0x44, 0x18, 0x03, 0x00, 0x83, 0xC2, 0x04, 0x83, 0xC1, 0x04, 0x83, 0x3A, 0x00, 0x75, 0xDB, 0xC7, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x46, 0x04, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC6, 0x20, 0x83, 0x7E, 0xF8,
	0x00, 0x75, 0x95, 0xC7, 0x87, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x74, 0x4D, 0x8B, 0x97, 0xA8, 0x00,
	0x00, 0x00, 0x33, 0xC9, 0x03, 0xD3, 0x8B, 0x42, 0x14, 0x03, 0xC3, 0x39, 0x4A, 0x10, 0x74, 0x10, 0x0F, 0x1F, 0x40, 0x00, 0xC6, 0x00, 0x00, 0x8D, 0x40, 0x01, 0x41, 0x3B, 0x4A, 0x10, 0x75, 0xF4, 0xC7, 0x42, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0xC7, 0x42, 0x14, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x42, 0x18, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0xBF, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x4B, 0x8B, 0x97, 0xA0, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x83, 0x3A, 0x00, 0x74, 0x2A, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x8B, 0x42, 0x04, 0x8D, 0x7A, 0x08, 0x8D, 0x48, 
	0xF8, 0xD1, 0xE9, 0x74, 0x0E, 0x33, 0xC0, 0xD1, 0xE9, 0xF3, 0xAB, 0x13, 0xC9, 0x66, 0xF3, 0xAB, 0x8B, 0x42, 0x04, 0x03, 0xD0, 0x83, 0x3A, 0x00, 0x75, 0xDE, 0x8B, 0x7D, 0xF8, 0xC7, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xC7, 0x87, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xBF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x74, 0x55, 0x8B, 0x8F, 0xC0, 0x00, 0x00, 0x00, 0x03, 0xCB, 0x8B, 0x41, 0x0C, 0x85, 0xC0, 0x74, 
	0x10, 0x83, 0x38, 0x00, 0x74, 0x0B, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC0, 0x04, 0x75, 0xF0, 0xC7, 0x41, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x41, 0x04, 0x00, 0x00, 
	0x00, 0x00, 0xC7, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x87, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B,
	0x45, 0xFC, 0xA8, 0x01, 0x74, 0x29, 0x8B, 0x45, 0x08, 0x8D, 0x7B, 0x08, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x8B, 0xF3, 0xC7, 0x43, 0x04, 0x00, 0x00, 0x00, 0x00, 0xB9, 0xFE, 0x03, 0x00, 0x00, 0xF3, 0xA5, 0x5E, 0x89,
	0x18, 0x33, 0xC0, 0x5B, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0xA8, 0x02, 0x74, 0x3A, 0x8B, 0x45, 0x08, 0x8B, 0x50, 0x04, 0x85, 0xD2, 0x75, 0x0E, 0x5E, 0x5B, 0xB8, 0x09, 0x00, 0x40, 0x00, 0x5F, 0x8B, 0xE5, 0x5D,
	0xC2, 0x04, 0x00, 0x8B, 0xCB, 0x2B, 0xD3, 0xBE, 0x00, 0x02, 0x00, 0x00, 0x0F, 0x1F, 0x40, 0x00, 0x8B, 0x04, 0x0A, 0x8D, 0x49, 0x08, 0x89, 0x41, 0xF8, 0x8B, 0x44, 0x0A, 0xFC, 0x89, 0x41, 0xFC, 0x83, 0xEE, 0x01, 0x75,
	0xEB, 0x8B, 0x45, 0x08, 0x5E, 0x89, 0x18, 0x33, 0xC0, 0x5B, 0x5F, 0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00
};

MANUAL_MAPPER_WOW64::~MANUAL_MAPPER_WOW64()
{
	if (pRawData)
	{
		delete[] pRawData;
	}

	if (pLocalImageBase)
	{
		VirtualFree(pLocalImageBase, 0, MEM_RELEASE);
	}

	if (pAllocationBase && !bKeepTarget)
	{
		VirtualFreeEx(hTargetProcess, pAllocationBase, 0, MEM_RELEASE);
	}
}

DWORD MANUAL_MAPPER_WOW64::AllocateMemory(DWORD & LastWin32Error)
{
	pLocalImageBase = ReCa<BYTE*>(VirtualAlloc(nullptr, ImageSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));
	if (!pLocalImageBase)
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_OUT_OF_MEMORY_INT;
	}

	if (Flags & INJ_MM_SHIFT_MODULE)
	{
		srand(GetTickCount64() & 0xFFFFFFFF);
		ShiftOffset = ALIGN_UP(rand() % 0x1000 + 0x100, 0x10);
	}

	ULONG_PTR ShellcodeSize = sizeof(ManualMap_Shell_WOW64);

	AllocationSize = ShiftOffset + ImageSize + DWORD((sizeof(MANUAL_MAPPING_DATA_WOW64) + ShellcodeSize) & 0xFFFFFFFF);

	if(Flags & INJ_MM_SHIFT_MODULE)
	{
		pAllocationBase = ReCa<BYTE*>(VirtualAllocEx(hTargetProcess, nullptr, AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));
		if (!pAllocationBase)
		{
			LastWin32Error = GetLastError();

			return INJ_ERR_OUT_OF_MEMORY_EXT;
		}
	}
	else
	{
		pAllocationBase = ReCa<BYTE*>(VirtualAllocEx(hTargetProcess, MPTR(pLocalOptionalHeader->ImageBase), AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));
		if (!pAllocationBase)
		{
			pAllocationBase = ReCa<BYTE*>(VirtualAllocEx(hTargetProcess, nullptr, AllocationSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));
			if (!pAllocationBase)
			{
				LastWin32Error = GetLastError();

				return INJ_ERR_OUT_OF_MEMORY_EXT;
			}
		}
	}

	pTargetImageBase	= pAllocationBase		+ ShiftOffset;
	pManualMappingData	= pTargetImageBase		+ ImageSize;
	pShellcode			= pManualMappingData	+ sizeof(MANUAL_MAPPING_DATA_WOW64);

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::CopyData(DWORD & LastWin32Error)
{
	memcpy(pLocalImageBase, pRawData, pLocalOptionalHeader->SizeOfHeaders);

	auto * pCurrentSectionHeader = IMAGE_FIRST_SECTION(pLocalNtHeaders);
	for (UINT i = 0; i != pLocalFileHeader->NumberOfSections; ++i, ++pCurrentSectionHeader)
	{
		if (pCurrentSectionHeader->SizeOfRawData)
		{
			memcpy(pLocalImageBase + pCurrentSectionHeader->VirtualAddress, pRawData + pCurrentSectionHeader->PointerToRawData, pCurrentSectionHeader->SizeOfRawData);
		}
	}
	
	if (Flags & INJ_MM_SHIFT_MODULE)
	{
		DWORD * pJunk = new DWORD[ShiftOffset / sizeof(DWORD)];
		if (!pJunk)
		{
			return INJ_ERR_OUT_OF_MEMORY_NEW;
		}

		DWORD SuperJunk = GetTickCount64() & 0xFFFFFFFF;

		for (UINT i = 0; i < ShiftOffset / sizeof(DWORD); ++i)
		{
			pJunk[i] = SuperJunk;
			SuperJunk ^= (i << (i % 32));
			SuperJunk -= 0x11111111;
		}

		WriteProcessMemory(hTargetProcess, pAllocationBase, pJunk, ShiftOffset, nullptr);

		delete[] pJunk;
	}

	auto LoadFunctionPointer_WOW64 = [=](HINSTANCE hLib, const char * szFunc, void * &pOut)
	{
		if (!GetProcAddressEx_WOW64(hTargetProcess, hLib, szFunc, pOut))
		{
			return false;
		}

		return true;
	};

	MANUAL_MAPPING_DATA_WOW64 data{ 0 };

	HINSTANCE hK32		= GetModuleHandleEx_WOW64(hTargetProcess, TEXT("kernel32.dll"));
	HINSTANCE hNTDLL	= GetModuleHandleEx_WOW64(hTargetProcess, TEXT("ntdll.dll"));

	if (Flags & INJ_FAKE_HEADER)
	{
		if (!hK32)
		{
			return INJ_ERR_REMOTEMODULE_MISSING;
		}

		data.hK32 = MDWD(hK32);
	}

	if (Flags & (INJ_MM_RESOLVE_IMPORTS | INJ_MM_RUN_DLL_MAIN))
	{
		if (!hK32)
		{
			return INJ_ERR_REMOTEMODULE_MISSING;
		}

		void * pLoadLibraryA = nullptr;
		if (!LoadFunctionPointer_WOW64(hK32, "LoadLibraryA", pLoadLibraryA))
		{
			return INJ_ERR_REMOTEFUNC_MISSING;
		}

		void * pGetModuleHandleA = nullptr;
		if  (!LoadFunctionPointer_WOW64(hK32, "GetModuleHandleA", pGetModuleHandleA))
		{
			return INJ_ERR_REMOTEFUNC_MISSING;
		}

		void * pGetProcAddress = nullptr;
		if (!LoadFunctionPointer_WOW64(hK32, "GetProcAddress", pGetProcAddress))
		{
			return INJ_ERR_REMOTEFUNC_MISSING;
		}

		data.pLoadLibraryA		= MDWD(pLoadLibraryA);
		data.pGetModuleHandleA	= MDWD(pGetModuleHandleA);
		data.pGetProcAddress	= MDWD(pGetProcAddress);
	}

	if (Flags & INJ_MM_ENABLE_SEH)
	{
		if (!hNTDLL)
		{
			return INJ_ERR_REMOTEMODULE_MISSING;
		}

		if (sym_ntdll_wow64_ret.wait_for(std::chrono::milliseconds(100)) != std::future_status::ready)
		{
			return INJ_ERR_SYMBOL_INIT_NOT_DONE;
		}

		DWORD sym_ret = sym_ntdll_wow64_ret.get();
		if (sym_ret != SYMBOL_ERR_SUCCESS)
		{
			LastWin32Error = sym_ret;

			return INJ_ERR_SYMBOL_INIT_FAIL;
		}

		DWORD rva = 0;
		sym_ret = sym_ntdll_wow64.GetSymbolAddress("RtlInsertInvertedFunctionTable", rva);
		if (sym_ret != SYMBOL_ERR_SUCCESS || !rva)
		{
			LastWin32Error = sym_ret;

			return INJ_ERR_SYMBOL_INIT_FAIL;
		}

		data.pRtlInsertInvertedFunctionTable = MDWD(hNTDLL) + rva;
	}

	if (Flags & INJ_MM_EXECUTE_TLS)
	{
		if (!hK32)
		{
			return INJ_ERR_REMOTEMODULE_MISSING;
		}

		void * pVirtualAlloc = nullptr;
		if (!LoadFunctionPointer_WOW64(hK32, "VirtualAlloc", pVirtualAlloc))
		{
			return INJ_ERR_REMOTEFUNC_MISSING;
		}

		data.pVirtualAlloc = MDWD(pVirtualAlloc);
	}

	data.pModuleBase	= MDWD(pTargetImageBase);
	data.Flags			= Flags;

	if (!WriteProcessMemory(hTargetProcess, pManualMappingData, &data, sizeof(data), nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	DWORD ShellcodeSize = sizeof(ManualMap_Shell_WOW64);
	if (!WriteProcessMemory(hTargetProcess, pShellcode, ManualMap_Shell_WOW64, ShellcodeSize, nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::RelocateImage(DWORD & LastWin32Error)
{
	UNREFERENCED_PARAMETER(LastWin32Error);

	BYTE * LocationDelta = pTargetImageBase - pLocalOptionalHeader->ImageBase;

	if (!LocationDelta)
	{
		return INJ_ERR_SUCCESS;
	}

	if (!pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size)
	{
		return INJ_ERR_IMAGE_CANT_RELOC;
	}

	auto * pRelocData = ReCa<IMAGE_BASE_RELOCATION*>(pLocalImageBase + pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
	while (pRelocData->VirtualAddress)
	{
		WORD * pRelativeInfo = ReCa<WORD*>(pRelocData + 1);
		UINT RelocCount = (pRelocData->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);

		for (UINT i = 0; i < RelocCount; ++i, ++pRelativeInfo)
		{
			if (RELOC_FLAG86(*pRelativeInfo))
			{
				DWORD * pPatch = ReCa<DWORD*>(pLocalImageBase + pRelocData->VirtualAddress + ((*pRelativeInfo) & 0xFFF));
				*pPatch += MDWD(LocationDelta);
			}
		}

		pRelocData = ReCa<IMAGE_BASE_RELOCATION*>(ReCa<BYTE*>(pRelocData) + pRelocData->SizeOfBlock);
	}

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::InitSecurityCookie(DWORD & LastWin32Error)
{
	UNREFERENCED_PARAMETER(LastWin32Error);

	if (!(Flags & INJ_MM_INIT_SECURITY_COOKIE))
	{
		return INJ_ERR_SUCCESS;
	}

	if (!pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].Size)
	{
		return INJ_ERR_LOAD_CONFIG_EMPTY;
	}

	DWORD new_cookie = GetTickCount64() & 0xFFFFFFFF;
	if (new_cookie == 0xBB40E64E)
	{
		++new_cookie;
	}
	else if (!(new_cookie & 0xFFFF0000))
	{
		new_cookie |= (new_cookie | 0x4711) << 16;
	}

	auto pLoadConfigData = ReCa<IMAGE_LOAD_CONFIG_DIRECTORY32*>(pLocalImageBase + pLocalOptionalHeader->DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress);
	pLoadConfigData->SecurityCookie = new_cookie;	

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::CopyImage(DWORD & LastWin32Error)
{
	if (!WriteProcessMemory(hTargetProcess, pTargetImageBase, pLocalImageBase, ImageSize, nullptr))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_WPM_FAIL;
	}

	return INJ_ERR_SUCCESS;
}

DWORD MANUAL_MAPPER_WOW64::SetPageProtections(DWORD & LastWin32Error)
{
	if (!(Flags & INJ_MM_SET_PAGE_PROTECTIONS))
	{
		return INJ_ERR_SUCCESS;
	}

	DWORD dwOld = NULL;
	if (!VirtualProtectEx(hTargetProcess, pTargetImageBase, pLocalOptionalHeader->SizeOfHeaders, PAGE_EXECUTE_READ, &dwOld))
	{
		LastWin32Error = GetLastError();

		return INJ_ERR_CANT_SET_PAGE_PROT;
	}

	auto * pCurrentSectionHeader = IMAGE_FIRST_SECTION(pLocalNtHeaders);
	for (UINT i = 0; i != pLocalFileHeader->NumberOfSections; ++i, ++pCurrentSectionHeader)
	{
		void * pSectionBase		= pTargetImageBase + pCurrentSectionHeader->VirtualAddress;
		DWORD characteristics	= pCurrentSectionHeader->Characteristics;
		DWORD dwProt			= PAGE_NOACCESS;

		if (characteristics & IMAGE_SCN_MEM_EXECUTE)
		{
			if (characteristics & IMAGE_SCN_MEM_WRITE)
			{
				dwProt = PAGE_EXECUTE_READWRITE;
			}
			else if(characteristics & IMAGE_SCN_MEM_READ)
			{
				dwProt = PAGE_EXECUTE_READ;
			}
			else
			{
				dwProt = PAGE_EXECUTE;
			}
		}
		else
		{
			if (characteristics & IMAGE_SCN_MEM_WRITE)
			{
				dwProt = PAGE_READWRITE;
			}
			else if (characteristics & IMAGE_SCN_MEM_READ)
			{
				dwProt = PAGE_READONLY;
			}
		}
		
		if (!VirtualProtectEx(hTargetProcess, pSectionBase, pCurrentSectionHeader->Misc.VirtualSize, dwProt, &dwOld))
		{
			LastWin32Error = GetLastError();

			return INJ_ERR_CANT_SET_PAGE_PROT;
		}
	}

	return INJ_ERR_SUCCESS;
}

DWORD _ManualMap_WOW64(const wchar_t * szDllFile, HANDLE hTargetProc, LAUNCH_METHOD Method, DWORD Flags, HINSTANCE & hOut, DWORD & LastWin32Error)
{
	MANUAL_MAPPER_WOW64 Module{ 0 };
	BYTE * pRawData{ nullptr };

	std::ifstream File(szDllFile, std::ios::binary | std::ios::ate);

	auto FileSize = File.tellg();

	pRawData = new BYTE[static_cast<size_t>(FileSize)];

	if (!pRawData)
	{
		File.close();

		return INJ_ERR_OUT_OF_MEMORY_NEW;
	}

	File.seekg(0, std::ios::beg);
	File.read(ReCa<char*>(pRawData), FileSize);
	File.close();

	Module.hTargetProcess = hTargetProc;

	Module.pRawData			= pRawData;
	Module.pLocalDosHeader	= ReCa<IMAGE_DOS_HEADER*>(Module.pRawData);
	Module.pLocalNtHeaders	= ReCa<IMAGE_NT_HEADERS32*>(Module.pRawData + Module.pLocalDosHeader->e_lfanew);
	Module.pLocalOptionalHeader = &Module.pLocalNtHeaders->OptionalHeader;
	Module.pLocalFileHeader		= &Module.pLocalNtHeaders->FileHeader;
	Module.ImageSize = Module.pLocalOptionalHeader->SizeOfImage;

	Module.Flags = Flags;

	DWORD dwRet = Module.AllocateMemory(LastWin32Error);
	if(dwRet != INJ_ERR_SUCCESS)
	{
		return dwRet;
	}

	dwRet = Module.CopyData(LastWin32Error);
	if(dwRet != INJ_ERR_SUCCESS)
	{
		return dwRet;
	}

	dwRet = Module.RelocateImage(LastWin32Error);
	if(dwRet != INJ_ERR_SUCCESS)
	{
		return dwRet;
	}
	
	dwRet = Module.CopyImage(LastWin32Error);
	if(dwRet != INJ_ERR_SUCCESS)
	{
		return dwRet;
	}

	DWORD remote_ret = 0;
	dwRet = StartRoutine_WOW64(hTargetProc, MDWD(Module.pShellcode), MDWD(Module.pManualMappingData), Method, (Flags & INJ_THREAD_CREATE_CLOAKED) != 0, LastWin32Error, remote_ret);

	if (dwRet != SR_ERR_SUCCESS)
	{
		if (Method != LAUNCH_METHOD::LM_QueueUserAPC && !(Method == LAUNCH_METHOD::LM_HijackThread && dwRet == SR_HT_ERR_REMOTE_TIMEOUT))
		{
			Module.bKeepTarget = true;
		}

		return dwRet;
	}
	else if (remote_ret != INJ_ERR_SUCCESS)
	{
		if (Method != LAUNCH_METHOD::LM_QueueUserAPC)
		{
			Module.bKeepTarget = true;
		}

		return remote_ret;
	}

	dwRet = Module.SetPageProtections(LastWin32Error);
	if (dwRet != INJ_ERR_SUCCESS)
	{
		return dwRet;
	}

	Module.bKeepTarget = true;

	auto zero_size = Module.AllocationSize - (Module.pManualMappingData - Module.pAllocationBase);
	BYTE * zero_bytes = new BYTE[zero_size];
	memset(zero_bytes, 0, zero_size);

	MANUAL_MAPPING_DATA_WOW64 data{ 0 };
	if (!ReadProcessMemory(hTargetProc, Module.pManualMappingData, &data, sizeof(data), nullptr))
	{
		LastWin32Error = GetLastError();

		WriteProcessMemory(hTargetProc, Module.pManualMappingData, zero_bytes, zero_size, nullptr);

		return INJ_ERR_VERIFY_RESULT_FAIL;
	}

	WriteProcessMemory(hTargetProc, Module.pManualMappingData, zero_bytes, zero_size, nullptr);

	hOut = ReCa<HINSTANCE>(MPTR(data.hRet));

	return dwRet;
}

#endif